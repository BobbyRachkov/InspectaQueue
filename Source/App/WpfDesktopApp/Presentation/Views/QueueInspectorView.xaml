<UserControl x:Class="Rachkov.InspectaQueue.WpfDesktopApp.Presentation.Views.QueueInspectorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Rachkov.InspectaQueue.WpfDesktopApp.Presentation.Views"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:queueInspector="clr-namespace:Rachkov.InspectaQueue.WpfDesktopApp.Presentation.ViewModels.QueueInspector"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:converters="clr-namespace:Rachkov.InspectaQueue.WpfDesktopApp.Presentation.Converters"
             xmlns:helpers="clr-namespace:Rachkov.InspectaQueue.WpfDesktopApp.Presentation.Helpers"
             d:DataContext="{d:DesignInstance Type=queueInspector:QueueInspectorViewModel}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <ResourceDictionary>
            <helpers:BindingProxy x:Key="Proxy" Data="{Binding CanAcknowledge}"/>
            <converters:BooleanToVisibilityConverter x:Key="CollapsedBooleanToVisibilityConverter" FalseValue="Collapsed"/>
            <converters:BooleanToVisibilityConverter x:Key="HiddenBooleanToVisibilityConverter" FalseValue="Hidden"/>
            <converters:IntegerToVisibilityConverter x:Key="IntegerToVisibilityConverter0" FalseValue="Collapsed" Threshold="1" Invert="True"/>
            <converters:IntegerToVisibilityConverter x:Key="IntegerToVisibilityConverter1" FalseValue="Collapsed" Threshold="1" Invert="False"/>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="25"/>
        </Grid.RowDefinitions>

        <Expander
            IsExpanded="True"
            Margin="5">
            <Grid>
                <StackPanel
                    VerticalAlignment="Center"
                    Orientation="Horizontal">
                    <CheckBox
                        IsChecked="{Binding FormatJson}">Format if valid JSON</CheckBox>
                    <mah:SplitButton 
                        Command="{Binding  AcknowledgeCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=SelectedIndex}"
                        Visibility="{Binding DataContext.CanAcknowledge, RelativeSource={RelativeSource AncestorType={x:Type UserControl}},Converter={StaticResource HiddenBooleanToVisibilityConverter}}"
                        SelectedIndex="0"
                        Margin="20 0"
                        Orientation="Horizontal">
                        <mah:SplitButton.Icon>
                            <Grid>
                                <iconPacks:PackIconFontAwesome 
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:SplitButton}}, Path=SelectedIndex,Converter={StaticResource IntegerToVisibilityConverter1}}"
                                    VerticalAlignment="Center" 
                                    Kind="CircleXmarkSolid" 
                                    Foreground="Red" 
                                    Margin="3 0"
                                    Width="15"/>
                                <iconPacks:PackIconFontAwesome 
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:SplitButton}}, Path=SelectedIndex,Converter={StaticResource IntegerToVisibilityConverter0}}"
                                    VerticalAlignment="Center" 
                                    Kind="CircleCheckSolid" 
                                    Foreground="Green" 
                                    Margin="3 0"
                                    Width="15" />
                            </Grid>
                        </mah:SplitButton.Icon>
                        <mah:SplitButton.Items>
                            <ContentPresenter Content="Acknowledge"/>
                            <ContentPresenter Content="Negative Acknowledge"/>
                        </mah:SplitButton.Items>
                    </mah:SplitButton>
                </StackPanel>

                <StackPanel
                    HorizontalAlignment="Right"
                    Orientation="Horizontal">
                    <CheckBox
                        IsChecked="{Binding Topmost}"
                        Margin="10 0">Topmost</CheckBox>
                    <Button Command="{Binding DisconnectCommand}">Disconnect</Button>
                </StackPanel>
            </Grid>
        </Expander>
        <DataGrid x:Name="MetroDataGrid"
                  ScrollViewer.CanContentScroll="False"
                  Grid.Row="1"
                  Margin="5"
                  AutoGenerateColumns="False"
                  EnableColumnVirtualization="True"
                  EnableRowVirtualization="True"
                  HeadersVisibility="All"
                  ItemsSource="{Binding Path=Entries}"
                  SelectionUnit="FullRow"
                  ColumnHeaderHeight="30" 
                  IsReadOnly="True"
                  SelectionMode="Extended"
                  SelectionChanged="OnSelectedEntriesChanged">
            <DataGrid.Columns>
                <DataGridTextColumn 
                    Binding="{Binding MessageInternalId}"
                    Header="#"
                    Width="Auto">
                </DataGridTextColumn>
                <DataGridTextColumn 
                    Binding="{Binding MessageId}" 
                    Header="Id" 
                    Width="Auto"/>
                <DataGridTemplateColumn 
                    Visibility="{Binding Source={StaticResource Proxy}, Path=Data, Converter={StaticResource HiddenBooleanToVisibilityConverter}}"
                    Header="Ack" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid 
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center">
                                <iconPacks:PackIconFontAwesome 
                                    Visibility="{Binding IsAcknowledged,Converter={StaticResource BooleanToVisibilityConverter}}"
                                    VerticalAlignment="Center" 
                                    Kind="CircleCheckSolid" 
                                    Foreground="Green" 
                                    Width="17" />
                                <iconPacks:PackIconFontAwesome 
                                    Visibility="{Binding IsNegativeAcknowledged,Converter={StaticResource BooleanToVisibilityConverter}}"
                                    VerticalAlignment="Center" 
                                    Kind="CircleXmarkSolid" 
                                    Foreground="Red" 
                                    Width="17"/>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn 
                    Binding="{Binding MessageKey}" 
                    Header="Key"
                    Width="250"/>
                <DataGridTextColumn 
                    Binding="{Binding DisplayableMessageText}"
                    Header="Content"
                    Width="700"/>
                <!--<DataGridTextColumn 
                    Visibility="{Binding CanAcknowledge, Converter={StaticResource BooleanToVisibilityConverter}}"
                    Binding="{Binding  }" 
                    Header="Ack" >
                    <DataGridTextColumn.HeaderTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="Custom column 1"></TextBlock>
                                <ComboBox>
                                    <ComboBoxItem>1</ComboBoxItem>
                                    <ComboBoxItem>2</ComboBoxItem>
                                    <ComboBoxItem>3</ComboBoxItem>
                                </ComboBox>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTextColumn.HeaderTemplate>
                </DataGridTextColumn>-->
            </DataGrid.Columns>
            <DataGrid.Style>
                <Style BasedOn="{StaticResource MahApps.Styles.DataGrid}" TargetType="{x:Type DataGrid}">
                    <Setter Property="AlternatingRowBackground" Value="{DynamicResource MahApps.Brushes.Gray10}" />
                </Style>
            </DataGrid.Style>
            <DataGrid.RowStyle>
                <Style BasedOn="{StaticResource MahApps.Styles.DataGridRow}" TargetType="{x:Type DataGridRow}">
                    <Style.Triggers>
                        <!--<DataTrigger Binding="{Binding Price, Mode=OneWay, Converter={StaticResource AlbumPriceIsTooMuchConverter}}" Value="True">
                            <Setter Property="Background" Value="#FF8B8B" />
                            <Setter Property="Foreground" Value="DarkRed" />
                        </DataTrigger>-->
                        <!--  IsMouseOver  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <!--<Condition Binding="{Binding Price, Mode=OneWay, Converter={StaticResource AlbumPriceIsTooMuchConverter}}" Value="True" />-->
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource MahApps.Brushes.Gray7}" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Copy row" Command="Copy" CommandParameter="{Binding}" />
                </ContextMenu>
            </DataGrid.ContextMenu>
        </DataGrid>
        <mah:ProgressRing 
            EllipseDiameterScale="0.7"
            Grid.Row="1"
            IsLarge="True"
            IsActive="{Binding IsMasterLoadingIndicatorOn}"
            VerticalAlignment="Center" 
            Foreground="White" 
            Width="100"/>
        <Expander 
            IsExpanded="{Binding IsPublishPanelOpened}"
            Grid.Row="2"
            Visibility="{Binding CanPublish, Converter={StaticResource CollapsedBooleanToVisibilityConverter}}">
            <Expander.Header>
                <StackPanel Orientation="Horizontal">
                    <Label
                        Padding="0"
                        Margin="0,0,18,0">PUBLISH</Label>
                    <StackPanel
                        Height="18"
                        Orientation="Horizontal"
                        HorizontalAlignment="Left" 
                        VerticalAlignment="Center"
                        Visibility="{Binding PublishStatusViewModel,Converter={StaticResource CollapsedBooleanToVisibilityConverter}}">
                        <TextBlock Text="Publishing status: "/>

                        <iconPacks:PackIconFontAwesome 
                            Visibility="{Binding PublishStatusViewModel.IsOk,Converter={StaticResource BooleanToVisibilityConverter}}"
                            VerticalAlignment="Center" 
                            Kind="CircleCheckSolid" 
                            Foreground="Green" 
                            Width="17" />
                        <iconPacks:PackIconFontAwesome 
                            Visibility="{Binding PublishStatusViewModel.IsFailed,Converter={StaticResource BooleanToVisibilityConverter}}"
                            VerticalAlignment="Center" 
                            Kind="CircleXmarkSolid" 
                            Foreground="Red" 
                            Width="17"/>
                        <mah:ProgressRing 
                            Visibility="{Binding PublishStatusViewModel.IsInProgress,Converter={StaticResource BooleanToVisibilityConverter}}"
                            VerticalAlignment="Center" 
                            Foreground="SkyBlue" 
                            Width="10"/>
                        <TextBlock Text=" "/>
                        <TextBlock Text="{Binding PublishStatusViewModel.StatusMessage}"/>
                        <TextBlock Text="    Queued: "/>
                        <TextBlock Text="{Binding PublishStatusViewModel.ReceivedMessages}"/>
                        <TextBlock Text="    Sent: "/>
                        <TextBlock Text="{Binding PublishStatusViewModel.DispatchedMessages}"/>
                    </StackPanel>
                </StackPanel>
            </Expander.Header>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="55"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Label 
                    Grid.Column="0"
                    Grid.Row="0">Key:</Label>
                <TextBox
                    Text="{Binding PublishKey}"
                    AcceptsTab="False"
                    KeyDown="TextBox_OnKeyDown"
                    KeyUp="TextBox_OnKeyUp"
                    MaxLines="1"
                    Margin="2"
                    Grid.Column="1"
                    Grid.Row="0" />
                <Label 
                    Grid.Column="0"
                    Grid.Row="1">Payload:</Label>
                <TextBox
                    KeyDown="TextBox_OnKeyDown"
                    KeyUp="TextBox_OnKeyUp"
                    TextWrapping="Wrap"
                    MinLines="2"
                    Text="{Binding PublishPayload,UpdateSourceTrigger=PropertyChanged}"
                    AcceptsReturn="True"
                    AcceptsTab="True"
                    Margin="2"
                    Grid.Column="1"
                    Grid.Row="1" />
                <Button
                    Command="{Binding PublishCommand,UpdateSourceTrigger=PropertyChanged}"
                    x:Name="SendButton"
                    ToolTip="LShift + Enter to send"
                    Margin="2"
                    Grid.Column="0"
                    Grid.Row="2" >
                    Send
                </Button>
                <StackPanel
                    Orientation="Horizontal"
                    Grid.Column="1"
                    Grid.Row="2">
                    <CheckBox
                        IsChecked="{Binding ClearKeyFieldOnPublish}"
                        Margin="20,0"
                        VerticalAlignment="Center">Clear key field on send</CheckBox>
                    <CheckBox
                        IsChecked="{Binding ClearPayloadFieldOnPublish}"
                        VerticalAlignment="Center">Clear payload field on send</CheckBox>
                </StackPanel>
            </Grid>
        </Expander>
        <StatusBar Grid.Row="3" VerticalContentAlignment="Center">
            <StatusBarItem>@Bobi Rachkov</StatusBarItem>
            <StatusBarItem>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">
                    <TextBlock Text=" Receiving status: "/>

                    <iconPacks:PackIconFontAwesome 
                        Visibility="{Binding ReceivingStatusViewModel.IsOk,Converter={StaticResource BooleanToVisibilityConverter}}"
                        VerticalAlignment="Center" 
                        Kind="CircleCheckSolid" 
                        Foreground="Green" 
                        Width="17" />
                    <iconPacks:PackIconFontAwesome 
                        Visibility="{Binding ReceivingStatusViewModel.IsFailed,Converter={StaticResource BooleanToVisibilityConverter}}"
                        VerticalAlignment="Center" 
                        Kind="CircleXmarkSolid" 
                        Foreground="Red" 
                        Width="17"/>
                    <mah:ProgressRing 
                        Visibility="{Binding ReceivingStatusViewModel.IsInProgress,Converter={StaticResource BooleanToVisibilityConverter}}"
                        VerticalAlignment="Center" 
                        Foreground="SkyBlue" 
                        Width="10"/>
                    <TextBlock Text=" "/>
                    <TextBlock Text="{Binding ReceivingStatusViewModel.StatusMessage}"/>
                    <TextBlock Text="    Received: "/>
                    <TextBlock Text="{Binding ReceivingStatusViewModel.ReceivedMessages}"/>
                    <TextBlock Text="    After filtering: "/>
                    <TextBlock Text="{Binding ReceivingStatusViewModel.DispatchedMessages}"/>
                    <TextBlock Text="    Displayed: "/>
                    <TextBlock Text="{Binding Entries.Count}"/>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</UserControl>
